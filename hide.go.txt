package main

import (
	"fmt"
	"io/ioutil"
	"os"
)

const (
	// all in byte
	FILE_HEADER_SIZE    = 14 // standard size of file header
	BMPINFO_HEADER_SIZE = 40 // standard size of bmpinfo header
	LENGTH_FIELD_SIZE   = 16 // size of occupancy in bmp for the length of hidden data
	INFO_UNIT_SIZE      = 4  // size of occupancy in bmp for a byte of hidden data
)

// Read all bytes from a file
func ReadAllFromFile(path string) []byte {
	if all, err := ioutil.ReadFile(path); err != nil {
		fmt.Fprintf(os.Stderr, "%v", err)
		os.Exit(1)
		return []byte{}
	} else {
		return all
	}
}

// Write all data to a file.
func WriteAllToFile(data []byte, path string) {
	if err := ioutil.WriteFile(path, data, 0666); err != nil {
		fmt.Fprintf(os.Stderr, "%v", err)
		os.Exit(1)
		return
	}
}

// Output the bmp file through the indepensible three parts.
// @param imp_path. Output path for the bmp image.
// @param fh, bh, pixel_array. File header, bmpinfo header, pixel array.
// @return possible errors for output
func ProduceImg(img_path string, fh []byte, bh []byte, pixel_array []byte) error {
	if f, err := os.OpenFile(img_path, os.O_RDWR|os.O_CREATE, 0660); err != nil {
		return err
	} else {
		f.Write(fh)
		f.Write(bh)
		f.Write(pixel_array)
		if err := f.Close(); err != nil {
			return err
		} else {
			return nil
		}
	}
}

// Transform bytes to an integer in a little-endian way
// @param bs. byte slice
// @return. The integer value transformed by the slice
func _4byte2int(bs []byte) int {
	// TODO Your code here
	var byteint int
        var byte_slice1 byte = bs[0]
	var byte_slice2 byte = bs[1]
	var byte_slice3 byte = bs[2]
	var byte_slice4 byte = bs[3]
	byteint =int(byte_slice1)+int(byte_slice2)*256+int(byte_slice3)*256*256+int(byte_slice4)*256*256*256	
	return byteint
}

// Retrieve three parts of the bmp file: file header, bmpinfo header and pixel
// array. Note the bmp file may contain other parts after the pixel array.
// @param imp_path. The bmp file path.
// @return file_header. File heder of 14 bytes.
// @return bmpinfo_header. Bmpinfo header of 40 bytes.
// @return pixel_array. Pixel array of bytes.
func GetPartsOfBmp(img_path string) ([]byte, []byte, []byte) {
	var file_header, bmpinfo_header, pixel_array []byte
	// TODO Your code here
	rd :=  ReadAllFromFile(img_path)
	file_header = rd[0:14]
	bmpinfo_header = rd[14:54]
	a := rd[18:22]
	b := rd[22:26]
	c := _4byte2int(a)
	d := _4byte2int(b)
	e := c*d*3
	pixel_array = rd[54:e+54]
	return file_header, bmpinfo_header, pixel_array
}

// Hide information into the pixel array
// @param hide_data. The data to be hidden
// @param pixel_array. The original pixel array
// @return the modified pixel data, which hides info.
func HideInfo(hide_data []byte, pixel_array []byte) []byte {
	// TODO Your code here
        length := len(hide_data)
        insert_data(length, pixel_array[0:16],16)
        for i := 0; i < len(hide_data); i++ {
        v := hide_data[i]
        // the offset of pixel array
        offset := 16+i*4
        // the corresponding slice that will be used
        insert_data(int(v),pixel_array[offset:offset+4],4)
        }
        return pixel_array
  }
// hide the integer data into byte slice
// using the first n bytes of the slice
func insert_data(data int,byte_slice []byte ,n int){      
       for t := 0; t < n; t++{
       _2bit := byte(data & 0x3)
       byte_slice[t] = byte_slice[t] & 0xFC
       byte_slice[t] = byte_slice[t] | _2bit
       data = data >> 2
       }	
} 
// Restore the hidden data from the pixel array.
// @param pixel_array. Pixel array in bmp file.
// @return. The hidden data in byte array.
func ShowInfo(pixel_array []byte) []byte {
	// TODO Your code here
	var length int
	var content []byte 
	length = restore_data(pixel_array[0:16],16)
	content = make([]byte,length)
	for i := 0; i < length; i++{
	//the offset of pixel array
	offset := 16+i*4
	// the corresponding slice that will be translated to a byte
	content[i] = byte(restore_data(pixel_array[offset:offset+4],4))
        }
        return content
}
// hide the integer data into byte slice
// using the first n bytes of the slice	
func restore_data(byte_slice []byte, n int) int{
        data := 0
        var i int 
        for i = n-1; i >=0; i--{
        _2bit := int(byte_slice[i]) & 0x3
        data = data << 2
        data = data|_2bit
        }
        return data
 }       
func HideProcedure(src_img_path string, hide_file_path string, dest_img_path string) {
	fmt.Printf("Hide %v into %v -> %v\n", hide_file_path, src_img_path, dest_img_path)
	file_header, bmpinfo_header, pixel_array := GetPartsOfBmp(src_img_path)
	hide_data := ReadAllFromFile(hide_file_path)
	new_pixel_array := HideInfo(hide_data, pixel_array)
	ProduceImg(dest_img_path, file_header, bmpinfo_header, new_pixel_array)
}

func ShowProcedure(src_img_path string, data_path string) {
	fmt.Printf("Show hidden info from %v, then write it to %v\n",
		src_img_path, data_path)
	_, _, pixel_array := GetPartsOfBmp(src_img_path)
	info := ShowInfo(pixel_array)
	WriteAllToFile(info, data_path)

}

func _print_usage() {
	fmt.Fprintf(os.Stderr, "* hide args: hide <src_img_path> <hide_file_path> "+
		"<dest_img_path>\n")
	fmt.Fprintf(os.Stderr, "* show args: show <img_path> <data_file>\n")
}

func main() {
	// please do not change any of the following code,
	// or do anything to subvert it.
	if len(os.Args) < 2 {
		_print_usage()
		return
	} else {
		action := os.Args[1]
		switch action {
		case "hide":
			{
				if len(os.Args) < 5 {
					_print_usage()
				} else {
					HideProcedure(os.Args[2], os.Args[3], os.Args[4])
				}
			}
		case "show":
			{
				if len(os.Args) < 4 {
					_print_usage()
				} else {
					ShowProcedure(os.Args[2], os.Args[3])
				}
			}
		default:
			_print_usage()
		}
	}
}